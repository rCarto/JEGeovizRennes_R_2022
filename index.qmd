---
format: html 
title: "Faire des cartes avec le logiciel libre R"
subtitle: "Journée d'étude - La boîte à outils de cartographie et de géovisualisation de données : regards croisés de chercheurs"
date: 2022-01-06

author:
    - name: Timothée Giraud
      orcid: 0000-0002-1932-3323
      email: timothee.giraud@cnrs.fr
      affiliations:
        - id: 1
          name: RIATE (CNRS)
          url: https://riate.cnrs.fr
lang: fr
toc: true
number-sections: true
bibliography: references.bib
csl: "universite-de-montreal-apa.csl"
execute: 
  cache: true
---

# Présentation de l'outil et de son environnement


## R et RStudio

[Diaporama](https://rcarto.github.io/R_et_RStudio/index.html)

## L'Écosystème spatial de R

[Diaporama](https://elementr.gitpages.huma-num.fr/session_1/rspatial/)








# Exemple d'analyse

Nous voulons étudier les déplacements effectués en covoiturage. 
Nous nous concentrerons sur les durées, distances et vitesses de ces déplacements. 




## Préparation des données

### Téléchargement des données

Nous téléchargeons les données pour les mois de septembre, octobre et novembre 2022. 

```{r download}
#| eval: false
# creation d'un dossier
dir.create("data-raw")
# URLs des fichiers
cov_2022_11 <- "https://www.data.gouv.fr/fr/datasets/r/5d469743-9636-4e84-841c-2ae1111b4009"
cov_2022_10 <- "https://www.data.gouv.fr/fr/datasets/r/80b38046-8166-49fd-bbee-fc0ba9612a88"
cov_2022_09 <- "https://www.data.gouv.fr/fr/datasets/r/513862ee-8e8e-426b-9b67-7a4e39ab253a"
# téléchargement des fichiers
download.file(cov_2022_11, destfile = "data-raw/cov_2022_11.csv")
download.file(cov_2022_10, destfile = "data-raw/cov_2022_10.csv")
download.file(cov_2022_09, destfile = "data-raw/cov_2022_09.csv")
```

### Import des données

Une fois les données téléchargées nous pouvons les importer dans R. 

```{r import}
#| eval: false
# import des fichiers dans R
cov_raw_1 <- read.csv(file = "data-raw/cov_2022_09.csv", sep = ";")
cov_raw_2 <- read.csv(file = "data-raw/cov_2022_10.csv", sep = ";")
cov_raw_3 <- read.csv(file = "data-raw/cov_2022_11.csv", sep = ";")
# rassemblement des 3 tables
cov_raw <- rbind(cov_raw_1, cov_raw_2, cov_raw_3)
```

```{r realimport}
#| include: false
cov_raw <- readRDS("data/cov.rds")
```



### Découverte du jeu de données

Nous pouvons étudier la structure et quelques statistiques très basiques sur le jeu de données.

```{r decouverte1}
# structure du jeu de données
str(cov_raw)
```

```{r decouverte2}
# statistiques basiques
summary(cov_raw)
```




Intéressons nous plus particulièrement aux distances et durées des trajets.
```{r decouverte3}
summary(cov_raw$journey_distance)
summary(cov_raw$journey_duration)
```

Les valeurs minimums de ces variables sont à 0, ce n'est pas très réaliste. 






### Nettoyage

Suppression des trajets dont la durée est inférieure à 2 minutes ou la distance inférieure à 1 kilomètre.

```{r clean}
cov <- cov_raw[cov_raw$journey_distance >= 1000 & 
                 cov_raw$journey_duration >= 2, ]
```




## Analyse globale

### Calcul des indicateurs, gestion des unités de mesure

Le package `units` [@R-units] permet de définir et convertir facilement les unités de mesure. 

```{r indicators}
# extraction des variable dans des vecteurs distincts
duree <- cov$journey_duration
distance <- cov$journey_distance
library(units)
# définition des unités de mesure initiales
units(distance) <- "m"
units(duree) <- "min"
# transformation des unités de mesure
distance <- set_units(distance, "km")
duree <- set_units(duree, "h")
# creation d'un vecteur des distances
vitesse <- distance / duree
```

### Représentations

Nous pouvons calculer quelques statistiques sur nos indicateurs.

```{r table}
summary_table <- data.frame(
  rbind(summary(duree), 
        summary(distance), 
        summary(vitesse)), 
  row.names = c("Durée (h)", "Distance (km)", "Vitesse (km/h)"), 
  check.names = FALSE
)
knitr::kable(summary_table, digits = 1)
```


Nous pouvons aussi créer rapidement des histogrammes des distributions.  

```{r histograms}
#| fig-show: hold
hist(duree)
hist(distance)
hist(vitesse)
```



Et finalement nous pouvons croiser les variables deux à deux avec des nuages de points. 

```{r plot_dd}
plot(x = distance, y = duree,
     main = "Rapport entre durée et distance des trajets",
     pch = 21, cex = .4, col = "white", bg = "darkred")
```


```{r plot_dv}
plot(x = distance, y = vitesse,
     main = "Rapport entre vitesse et distance des trajets",
     pch = 21, cex = .4, col = "white", bg = "darkblue")
abline(h = 80, lty = 2, lwd = .5)
abline(h = 110, lty = 2, lwd = .5)
```



```{r utils2}
#| cache: false
#| echo: false
knitr::opts_chunk$set(cache = TRUE)
```



## Zoom sur la Haute-Garonne

### Sélection des données

Nous sélectionnons les trajets depuis la Haute-Garonne (31) de moins de 100 km et de moins d'1h30.

```{r selecta31}
# choix du département
dep <- 31
# selection
covdep <- cov[cov$journey_start_department %in% dep & 
                cov$journey_distance <= 100000 &
                cov$journey_duration <= 150, ]
# dimension de l'extraction
dim(covdep)
```


::: {.callout-note}
Il suffit de modifier `dep <- 31` pour obtenir l'analyse sur un autre département. 
:::



### Calcul des indicateurs, gestion des unités de mesure

```{r indicators31}
# extraction des variable dans des vecteurs
duree <- covdep$journey_duration
distance <- covdep$journey_distance
library(units)
# définition des unités de mesure initiales
units(distance) <- "m"
units(duree) <- "min"
# transformation d'unité de mesure
distance <- set_units(distance, "km")
# calcul des vitesses
vitesse <- distance / duree
# transformation de l'unité de mesure des vitesses
vitesse <- set_units(vitesse, "km/h")
```

### Représentations et statistiques

```{r table31}
summary_table <- data.frame(
  rbind(summary(duree), 
        summary(distance), 
        summary(vitesse)), 
  row.names = c("Durée (m)", "Distance (km)", "Vitesse (km/h)"), 
  check.names = FALSE
)
knitr::kable(summary_table, digits = 1)
```




```{r histograms31}
#| fig-show: hold
hist(duree, breaks = seq(0,max(as.numeric(duree))+1,1))
hist(distance, breaks = seq(0,100,1))
hist(vitesse, breaks = seq(0,max(as.numeric(vitesse)+1),1))
```


```{r plot_dd31}
plot(x = distance, y = duree,
     main = "Rapport entre durée et distance des trajets",
     pch = 21, cex = .4, col = "white", bg = "darkred") 
```

```{r plot_dv31}
plot(x = distance, y = vitesse,
     main = "Rapport entre vitesse et distance des trajets",
     pch = 21, cex = .4, col = "white", bg = "darkblue")
```


### Récupération de trajets théoriques

Dans la partie suivante nous voulons obtenir une approximation des trajets effectués par les usagers du covoiturage. Pour cela nous utiliserons les trajets par le plus court chemin entre les départs et les arrivées des covoiturages en utilisant le réseau routier fourni par la base de données OpenStreetMap.   

Nous utilisons le package `osrm` [@R-osrm] pour récupérer ces trajets théoriques. Ces trajets sont calculés par le logiciel OSRM (Open Source Routing Machine) [@luxen-vetter-2011] qui se base sur les données d'OpenStreetMap. Le package `osrm` sert d'interface entre R et OSRM.  



La fonction ci-dessous est utile pour demander une très grande quantité de routes en utilisant les fonctionnalités de parallélisation de R. Pour l'utiliser il est nécessaire d'avoir accès à un serveur OSRM. 

```{r nadapar}
#| eval: false
#| code-fold: true
#| code-summary: "Fonction d'extraction des routes en masse"
get_routes <- function(x, 
                       srcX = "srcx", srcY = "srcy",
                       dstX = "dstx", dstY = "dsty", 
                       ncl = 5){
  ny <- nrow(x)
  sequence <- unique(c(seq(1, ny, 500), ny + 1))
  lseq <- length(sequence) - 1
  ml <- list()
  for  (i in 1:lseq) {
    ml[[i]] <- x[(sequence[i]):(sequence[i + 1] - 1),
                 c(srcX, srcY, dstX, dstY)]
  }
  cl <- parallel::makeCluster(ncl)
  doParallel::registerDoParallel(cl,)
  roads <- foreach::`%dopar%`(
    foreach::foreach(
      ml = ml,
      .packages = c("osrm", "sf"),
      .combine = rbind,
      .inorder = FALSE
    ),
    {
      l <- vector("list", nrow(ml))
      for( i in seq_along(l)){
        l[[i]] <- osrmRoute(src = ml[i, c(srcX, srcY)], 
                            dst = ml[i, c(dstX, dstY)], 
                            osrm.server = "http://0.0.0.0:5000/",
                            osrm.profile = "car",
                            overview = "full")
      }
      l <- do.call(rbind, l)
      l
    }
  )
  parallel::stopCluster(cl)
  roads
}
```

Nous pouvons maintenant extraire les routes avec la fonction `get_routes()`.
```{r nadagetroadsnope}
#| eval: false
roads <- get_routes(x = covdep, 
                    srcX = "journey_start_lon", 
                    srcY = "journey_start_lat",
                    dstX = "journey_end_lon", 
                    dstY = "journey_end_lat", 
                    ncl = 7)

```


```{r importroadsx}
#| include: false
library(sf)
roads <- st_read(dsn = "data/road.gpkg", layer = paste0("road_",dep), quiet = TRUE)
```


Affichons 3 trajets au hasard. Pour les visualiser nous utilisons le package `sf` [@R-sf].
```{r trestrajos}
library(sf)
plot(st_geometry(roads[5:7,]))
```


Cette opération d'extraction étant assez lourde nous pouvons sauvegarder son résultat pour une utilisation ultérieure. 

```{r nadagetroads}
#| eval: false
library(sf)
st_write(obj = roads, 
         dsn = "data/road.gpkg", 
         layer = paste0("road_",dep), 
         append = FALSE)
```





### (Import des trajets pré-enregistrés)

```{r importroadspourdefaux}
#| eval: false
library(sf)
roads <- st_read(dsn = "data/road.gpkg", layer = paste0("road_",dep))
```



### Comparaison des trajets réels et théoriques


Nous pouvons maintenant comparer les distances et les durées réelles et théoriques. 

```{r graphroadsosrm}
#| fig-width: 7
#| fig-height: 7
# définition de l'unité de mesure
units(roads$duration) <- "min" 
units(roads$distance) <- "km" 
# arrondi des durées
duree_osrm <- round(roads$duration,2)
distance_osrm <- roads$distance
plot(duree, duree_osrm, asp = 1, 
     pch = 21, cex = .5, col = "white",
     bg = "darkred", 
     xlim = c(0,100), ylim = c(0,100), 
     main = "Rapport entre durées réelles et théoriques")
abline(a = 0, b = 1)

plot(distance, distance_osrm, asp = 1, 
     pch = 21, cex = .5, col = "white", 
     bg = "darkblue", xlim = c(0,100),
     ylim = c(0,100),
     main = "Rapport entre distances réelles et théoriques")
abline(a = 0, b = 1)


```



### Cartographie 1

Sur une première carte nous montrerons les tronçons de routes empruntés par les usagers du covoiturage dans la zone où a lieu le plus grand nombre de départs dans le département. L'epaisseur de chaque tronçons doit être proportionelle aux nombre de voitures l'empruntant. 

#### Trouver la zone ou a lieu le plus grand nombre de départs

Création d'une couche de points des lieux de départs : 
```{r tlse}
covdep_start <- st_as_sf(covdep, 
                         coords  = c('journey_start_lon', 
                                     'journey_start_lat'), 
                         crs = "EPSG:4326", remove = FALSE)
# reprojection en webmercator
covdep_start <- st_transform(covdep_start, "EPSG:3857")
```

EPCI ou AOM (*towngroup*) où ont lieux le plus de départs : 
```{r tlse1}
# Aggrégation des départ par EPCI ou AOM 
# et sélection de l'EPCI ou AOM ayant le plus de départs
city <- tapply(X = covdep$trip_id, 
               INDEX = covdep$journey_start_towngroup, 
               FUN = length) |>
  sort(decreasing = TRUE)|>
  names()|>
  head(1)

city
```

Création d'une zone de 30 km autour du centroide des départs de la zone : 

```{r tlse2}
zone <- covdep_start |>                          # à partir des points de départs
  subset(journey_start_towngroup %in% city) |>   # sélection des points de l'EPCI
  st_geometry() |>                               # extraction de leurs géométrie
  st_union() |>                                  # transformation en multipoint
  st_centroid() |>                               # extraction du centroide    
  st_buffer(30000) |>                            # buffer autour du centroid
  st_sf()                                        # transformation en objet sf
```

Affichage de la zone :

```{r}
plot(zone)
```


#### Télécharger des tuiles raster pour le fond de carte

Téléchargement de tuiles raster (Terrain Background de chez Stamen) sur la zone. Nous utilisons le package `maptiles` [@R-maptiles] pour cela :

```{r osmT}
#| cache: false
library(maptiles)
osm <- get_tiles(zone, 
                 provider = "Stamen.TerrainBackground", 
                 zoom = 11, 
                 cachedir = "tiles")
plot_tiles(osm)
```

Nous pouvons ensuite découper les tuiles en fonction de la zone définie précédement. Pour cela nous utilisons le package `terra` [@R-terra] :

```{r osmT2}
#| cache: false
library(terra)
osm_r <- osm |>
  mask(zone) |>
  crop(zone)
```

Nous pouvons ensuite visualiser les tuiles et la zone grace au package `mapsf` [@R-mapsf].

```{r}
#| eval: true
#| echo: false
library(mapsf)
theme <- mf_theme("green",
                  mar = c(0,0,2,0), 
                  line = 2, 
                  cex = 1.8, 
                  inner = FALSE, 
                  pos = "left")
ratio <- mf_get_ratio(zone, 6, theme = theme)
```



```{r osmT3}
#| fig-width: !expr ratio[1]
#| fig-height: !expr ratio[2]
library(mapsf)
# définition d'un thème
theme <- mf_theme("green",
                  mar = c(0,0,2,0), 
                  line = 2, 
                  cex = 1.8, 
                  inner = FALSE, 
                  pos = "left")
# initialisation de la carte sur l'objet "zone"
mf_init(zone)
# affichage des tuiles
mf_raster(osm_r, add = TRUE)
# affichage de la zone
mf_map(zone, col = NA, lwd = 15, add = TRUE)
# titre
mf_title(city)
```



#### Agrégation des tronçons

Pour l'instant chaque trajet est individualisé. Si plusieurs trajets empruntent le même tronçon ils se superposent. Ces superpositions sont visibles dans la carte suivante utilisant la transparence.  

```{r prep}
# Préparation des routes

# reprojection en webmercator
roads <- st_transform(roads, "EPSG:3857")
# découpage des route à la limite de la zone
roads <- st_intersection(roads, st_geometry(zone))
# keep only linestrings
roads <- st_collection_extract(roads, "LINESTRING")
```



```{r alpha}
#| fig-width: !expr ratio[1]
#| fig-height: !expr ratio[2]
mf_init(zone, theme = theme)
mf_raster(osm_r, add = TRUE)
# affichage des routes avec de la transparence  
mf_map(roads, lwd = 2, col = "#94000005", add = TRUE)
mf_map(zone, col = NA, lwd = 15, add = TRUE)
mf_title(city)
```



Nous devons maintenant agréger les tronçons de route se superposant et compter le nombre de superpositions par tronçons. Pour cela nous utilisons le package `stplanr` [@R-stplanr]. Cette opération est assez lourde, nous enregistrons son résultat pour une utilisation ultérieure : 


```{r}
#| eval: false
# Agrégation des tronçons
library(stplanr)
# variable de poids (1 pour chaque trajets)
roads$n <- 1
# agrégation des trajets par tronçons
roads_n <- overline(sl = roads, attrib = "n", ncores = 7)
# Sauvegarder le résultat
st_write(obj = roads_n, 
         dsn = "data/road.gpkg", 
         layer = paste0("road_",dep,"_ag"), 
         append = FALSE)

```


(Import des tronçons agrégés)
```{r importroads}
#| eval: true
roads_n <- st_read(dsn = "data/road.gpkg", 
                   layer = paste0("road_",dep, "_ag"), 
                   quiet = TRUE)
```


#### Création de la carte

```{r osmap}
#| results: hide
# Valeur max
maxv <- max(roads_n$n)
# Credits de la carte
credits <- paste0("T. Giraud, 2023\n", 
                  get_credit("Stamen.TerrainBackground"), '\n',
                  "Registre de Preuve de Covoiturage (DGITM) - ", 
                  "Au départ du département, pour moins de 100 km et ",
                  "moins d'1H30, ",
                  "de septembre à novembre 2022")
# Début de l'export, définition de ses dimentions
mf_export(zone, filename = paste0("map", dep, ".png"), 
          width = 700, expandBB = c(.05,0,0,0.2), 
          theme = theme)
# Affichage des tuiles
mf_raster(osm_r, add = TRUE)
# Affichage des routes epaisseurs proportionnelles
# aux nombre de superpositions
mf_map(x = roads_n, var = 'n', type = 'prop', 
       val_max = maxv, col = "darkgreen",
       leg_pos = "topright", 
       leg_title = "Nombre de\ncovoiturages\npar tronçon", 
       leg_frame = TRUE, 
       )
# titre
mf_title(city)
# credits
mf_credits(credits)
# zone
mf_map(x = zone, col  = NA, lwd = 15, add = TRUE)
# echelle
mf_scale(5)
# Fin de l'export
dev.off()
```

![](map31.png){width="700px"}



### Cartographie 2

Sur cette carte nous allons représenter le nombre de départs en agrégeant les points de départs dans un maillage régulier.

#### Création d'une grille régulière

```{r gridcreate}
#| fig-width: !expr ratio[1]
#| fig-height: !expr ratio[2]
# superficie d'une cellule (1km2)
size <- 1e6
# transformation de la surface en "rayon" d'un hexagone
cellsize <- 2 * sqrt(size/((3*sqrt(3)/2))) * sqrt(3)/2
# création d'une grille d'hexagones
grid <- st_make_grid(x = zone, 
                     cellsize = cellsize, 
                     square = FALSE) 
# transformation sfc vers sf + ajout id
grid <- st_sf(id = 1:length(grid), geometry = grid)
# affichage du resultat
mf_map(grid)
mf_map(zone, add = TRUE, col = NA, lwd = 2, border = "red")
```

#### Découpage de la grille par la zone

```{r gridcut}
#| fig-width: !expr ratio[1]
#| fig-height: !expr ratio[2]
grid <- st_intersection(grid, zone)
# affichage du resultat
mf_map(grid)
mf_map(zone, add = TRUE, col = NA, lwd = 2, border = "red")
```

#### Compter les points dans la grille
```{r cptpt}
# liste des intersections
inter_g_pt <- st_intersects(grid, covdep_start)
# Chaque element de la liste contient l'index des points se trouvant dans le 
# polygone correspondant
inter_g_pt[120:125]
# parcourir la liste et compter le nombre d'intersections
grid$n_pt <- sapply(inter_g_pt, length)

```



#### Création de la carte

```{r}
#| results: hide
mf_export(zone, filename = paste0("map", dep, "hexa_point.png"), 
          width = 700, expandBB = c(.05,0,0,0.2), 
          theme = theme)
mf_raster(osm_r, add = TRUE)
mf_map(grid, 
       var = "n_pt", type = 'prop',
       leg_pos = "topright",
       leg_title = "Nombre de départs",
       inches = .175, add = TRUE)
mf_title(city)
mf_credits(credits)
mf_map(x = zone, col  = NA, lwd = 15, add = T)
mf_scale(5)
dev.off()
```


![](map31hexa_point.png){width="700px"}


### Cartographie 3
Représentons maintenant la densité de points par cellulle de notre maillage régulier. 
Pour cela nous devons créer une variable de densité de points par km2 et la discrétiser.

#### Discrétisation
```{r discr1}
# densité de points
grid$dens_pt <- as.numeric(grid$n_pt / set_units(st_area(grid), "km2"))

# discretisation
v <- as.numeric(grid$dens_pt)
boxplot(v)
# Ne gardons que les cellule >0
v <- v[v>0]
htitle <- "Distribution de la densité de départs"
hlab <- "Départs par km2"
par(mar = c(5.1,2.1,2.1,2.1), mfrow = c(3,1))
hist(
  x = v, 
  n = 50,
  main = htitle, 
  xlab = hlab,
  freq = FALSE
)
boxplot(v, horizontal = T)
stripchart(
  x = v,
  method = "jitter", 
  pch = 21,
  bg = "red", 
  col = "white",
  cex = .9
)
```

La distribution de la variable est très dissymétrique à gauche. Utilisons une discrétisation basée sur une progression géométrique. 

```{r discr2}
#| fig-width: 7
#| fig.height: 5
bks <- mf_get_breaks(
  x = v, 
  nbreaks = 8, 
  breaks = "geom"
) 
cols <- mf_get_pal(
  n = 8, 
  palette = "SunsetDark",
  rev = TRUE
)
par(mfrow = c(1,1), mar = c(5.1,0.1,2.1,0.1))
x <- hist(
  x = v, 
  breaks = bks, 
  col = cols, 
  xlab = hlab, 
  freq = FALSE, 
  axes = FALSE, 
  ylab = "",
  main = htitle, 
  border = "grey80", 
  lwd = 3, 
  ylim = c(-0.02, 0.175), 
  xlim = c(0,max(v))
)
stripchart(
  x = v, 
  pch = 21,
  bg = "grey20", 
  col = "white",
  at = -0.015, 
  jitter = 0.007, 
  add = TRUE,
  method = "jitter", 
  cex = .7,
  xlab = ""
)
axis(side = 1, at = seq(0,round(max(v), 0),200), lwd = .5, col = "grey50")
points(x = bks, y = rep(0, length(bks)), pch = "|")
```

#### Création de la carte

```{r cartor}
#| results: hide
mf_export(zone, filename = paste0("map", dep, "hexa.png"), 
          width = 700, expandBB = c(.05,0,0,0.2), 
          theme = theme)
mf_raster(osm_r, add = TRUE)
mf_map(grid[grid$dens_pt>0,], var = "dens_pt", type = 'choro', 
       breaks = bks, pal= cols, 
       border = NA, 
       leg_title = "Densité de départs\npar km2", 
       leg_pos = "topright",
       leg_val_rnd = 0, add = TRUE)
mf_title(city)
mf_credits(credits)
mf_map(x = zone, col  = NA, lwd = 15, add = T)
mf_scale(5)
dev.off()
```

![](map31hexa.png){width="700px"}


### Cartographie 4

Sur une deuxième carte nous allons représenter la densité des points de départs en utilisant la méthode KDE. 

#### Calcul du KDE
Pour cela nous utilisons le package `spatstat` [@R-spatstat] :

```{r liss}
#| results: hide
library("spatstat")
# transformation des points sf en points spatstat
p <- as.ppp(st_coordinates(covdep_start), W = as.owin(zone))
# calcul du KDE
ds <- density.ppp(p, sigma = 1000, eps = c(100, 100), positive = TRUE)
rasdens <- rast(ds) * 1000 * 1000
crs(rasdens) <- 'EPSG:3857'
plot(rasdens)
```

#### Cartographie

Nous utlisons le package `tanaka` [@R-tanaka] pour représenter le KDE avec un effet pseudo 3D : 
```{r liss2}
#| results: hide
# calcul des bornes des classes
v <- values(rasdens)
bks <- mf_get_breaks(v[v>5], nbreaks = 8, breaks = "geom")
bks <- unique(c(0,bks))
# création d'une palette de couleurs
cols <- hcl.colors(n = length(bks)-1, "Inferno", rev=F)
# crédits
credits <- paste0("T. Giraud, 2023\n", 
                  "Registre de Preuve de Covoiturage (DGITM)\n", 
                  "Au départ du département, pour moins de 100 km et ",
                  "moins d'1H30, ",
                  "de septembre à novembre 2022")
library(tanaka)
mf_export(zone, filename = paste0("map", dep, "dens.png"), 
          width = 700, expandBB = c(.05,0,0,0.2), 
          theme = theme)
tanaka(rasdens, breaks = bks, col = cols, 
       legend.pos = "n", mask = zone, 
       add = TRUE)
mf_legend(type = "choro", pos = "topright",
          val = bks,pal = cols, 
          title = paste0("Densité de départs\n", 
                         "KDE, sigma=1km\n",
                         "(départs par km2)"),
          val_rnd = 0)
mf_map(roads_n, 'n', 'prop', col = "#ffffff50",
       leg_title = "Nombre de\ncovoiturages\npar tronçon", 
       val_max = maxv, leg_pos = "right")
mf_title(city)
mf_credits(credits)
mf_map(x = zone, col  = NA, lwd = 15, add = T)
mf_scale(5)
dev.off()
```

![](map31dens.png){width="700px"}

## Autres villes 
::: {.panel-tabset}


### Nantes 
![](map44.png){width="700px"}
![](map44hexa_point.png){width="700px"}
![](map44hexa.png){width="700px"}
![](map44dens.png){width="700px"}

### Montpellier
![](map34.png){width="700px"}
![](map34hexa_point.png){width="700px"}
![](map34hexa.png){width="700px"}
![](map34dens.png){width="700px"}

:::


## Pour la reproductibilité

```{r}
sessionInfo()
```







